substitutions:
  device_name: mmwave
  ## FIXME: To be removed later. Would cause a breaking change.
  uart_tx_pin: GPIO19
  uart_rx_pin: GPIO18
  ##
  gpio_pin: GPIO23
  header_file: leapmmw_sensor.h

esphome:
  name: ${device_name}
  includes:
    - ${header_file}

external_components:
  - source:
      type: local
      path: ../components
    components: [hs2xx3a]

logger:
  logs:
    sensor: INFO # reduced logging to minimize web_server target overload..
    script: ERROR

## FIXME: To be removed later. Would cause a breaking change
uart:
  id: uart_bus
  tx_pin: ${uart_tx_pin}
  rx_pin: ${uart_rx_pin}
  baud_rate: 115200
##

binary_sensor:
  - platform: gpio
    name: mmwave_presence_detection
    id: mmwave_presence_detection
    device_class: motion
    pin:
      number: ${gpio_pin}
      mode: INPUT_PULLDOWN
    on_state:
      - if:
          condition:
            binary_sensor.is_off: mmwave_presence_detection
          then:
            - sensor.template.publish:
                id: num_targets
                state: 0
            - lambda: |-
                return clearTargets();
  - platform: hs2xx3a
    lambda: |-
      auto s = new leapmmw(id(uart_bus));
      App.register_component(s);
      return {};
    sensors:
    
sensor:      
  - platform: template
    name: target_1_distance_m
    id: target_1_distance_m # do not change
    internal: true
    
  - platform: template
    name: target_2_distance_m
    id: target_2_distance_m # do not change
    internal: true
    
  - platform: template
    name: target_3_distance_m
    id: target_3_distance_m # do not change
    internal: true
    
  - platform: template
    name: target_4_distance_m
    id: target_4_distance_m # do not change
    internal: true
    
  - platform: template
    name: target_1_SNR
    id: target_1_SNR # do not change
    internal: true

  - platform: template
    name: target_2_SNR
    id: target_2_SNR # do not change
    internal: true
    
  - platform: template
    name: target_3_SNR
    id: target_3_SNR # do not change
    internal: true
    
  - platform: template
    name: target_4_SNR
    id: target_4_SNR # do not change
    internal: true

  - platform: template
    name: num_targets
    id: num_targets # do not change
    accuracy_decimals: 0

switch:
  - platform: safe_mode
    name: use_safe_mode

  - platform: template
    name: show_target_stats
    id: show_target_stats
    optimistic: true
    internal: true
    on_turn_off:
      - lambda: 'return clearTargets();'

  - platform: template
    name: mmwave_sensor
    id: mmwave_sensor # do not change
    entity_category: config
    optimistic: true
    turn_on_action:
      then:
        - script.execute: turn_on_mmwave_sensor
    turn_off_action:
      then:
        - script.execute: turn_off_mmwave_sensor

  - platform: template
    name: led
    id: led  # do not change
    entity_category: config
    optimistic: true
    turn_on_action:
      then:
        - if:
            condition:
              or:
                - script.is_running: turn_on_led
                - script.is_running: turn_off_led
                - script.is_running: set_distance
                - script.is_running: set_latency
                - script.is_running: set_sensitivity
            then:
              - script.wait: turn_on_led
              - script.wait: turn_off_led
              - script.wait: set_distance
              - script.wait: set_latency
              - script.wait: set_sensitivity
              - delay: 100ms
              - script.execute: turn_on_led
            else:
              - delay: 100ms
              - script.execute: turn_on_led
    turn_off_action:
      then:
        - if:
            condition:
              or:
                - script.is_running: turn_on_led
                - script.is_running: turn_off_led
                - script.is_running: set_distance
                - script.is_running: set_latency
                - script.is_running: set_sensitivity
            then:
              - script.wait: turn_on_led
              - script.wait: turn_off_led
              - script.wait: set_distance
              - script.wait: set_latency
              - script.wait: set_sensitivity
              - delay: 100ms
              - script.execute: turn_off_led
            else:
              - delay: 100ms
              - script.execute: turn_off_led

number:
  - platform: template
    name: distance
    id: distance # do not change
    entity_category: config
    min_value: 0.15
    max_value: 9.45
    step: 0.15
    unit_of_measurement: M
    mode: box
    lambda: |-
      leapmmw(id(uart_bus)).getmmwConf("getRange");
      return {};
    set_action:
      then:
        - globals.set:
            id: distance_global
            value: !lambda 'return x;'
        - if:
            condition:
              or:
                - script.is_running: turn_on_led
                - script.is_running: turn_off_led
                - script.is_running: set_distance
                - script.is_running: set_latency
                - script.is_running: set_sensitivity
            then:
              - script.wait: turn_on_led
              - script.wait: turn_off_led
              - script.wait: set_distance
              - script.wait: set_latency
              - script.wait: set_sensitivity
              - delay: 75ms
              - script.execute: set_distance
            else:
              - delay: 75ms
              - script.execute: set_distance 
      
  - platform: template
    name: latency
    id: latency # do not change
    entity_category: config
    min_value: 1
    max_value: 600
    lambda: |-
      leapmmw(id(uart_bus)).getmmwConf("getLatency");
      return {};
    step: 1
    unit_of_measurement: s
    mode: box
    set_action:
      then:
        - globals.set:
            id: latency_global
            value: !lambda 'return x;'
        - if:
            condition:
              or:
                - script.is_running: turn_on_led
                - script.is_running: turn_off_led
                - script.is_running: set_distance
                - script.is_running: set_latency
                - script.is_running: set_sensitivity
            then:
              - script.wait: turn_on_led
              - script.wait: turn_off_led
              - script.wait: set_distance
              - script.wait: set_latency
              - script.wait: set_sensitivity
              - delay: 50ms
              - script.execute: set_latency
            else:
              - delay: 50ms
              - script.execute: set_latency

  - platform: template
    name: sensitivity
    id: sensitivity # do not change
    entity_category: config
    min_value: 0
    max_value: 9
    lambda: |-
      leapmmw(id(uart_bus)).getmmwConf("getSensitivity");
      return {};
    step: 1
    set_action:
      then:
        - globals.set:
            id: sensitivity_global
            value: !lambda 'return x;'
        - if:
            condition:
              or:
                - script.is_running: turn_on_led
                - script.is_running: turn_off_led
                - script.is_running: set_distance
                - script.is_running: set_latency
                - script.is_running: set_sensitivity
            then:
              - script.wait: turn_on_led
              - script.wait: turn_off_led
              - script.wait: set_distance
              - script.wait: set_latency
              - script.wait: set_sensitivity
              - delay: 25ms
              - script.execute: set_sensitivity
            else:
              - delay: 25ms
              - script.execute: set_sensitivity

button:
  - platform: restart
    name: Restart_ESP_${device_name}
    entity_category: diagnostic
    on_press:
      - uart.write:
          id: uart_bus
          data: "resetSystem 0"

  - platform: template
    name: factory_reset_mmwMCU_${device_name}
    id: factory_reset_mmwMCU
    entity_category: diagnostic
    on_press:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "resetCfg"
      - delay: 3s
      - switch.turn_on: mmwave_sensor

globals:
  - id: distance_global
    type: float
  - id: latency_global
    type: float
  - id: sensitivity_global
    type: int

script:
  - id: turn_on_mmwave_sensor
    then:
      - uart.write: "setUartOutput 1 0"
      - delay: 1s
      - uart.write: "setUartOutput 2 1 1 2"
      - delay: 1s
      - uart.write: "saveConfig"
      - delay: 3s 
      - uart.write: "sensorStart"

  - id: turn_off_mmwave_sensor
    then:
      - uart.write: "sensorStop"

  - id: turn_on_led
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 0"
      - delay: 1s
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getLedMode 1");
      - delay: 1s 
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays
    
  - id: turn_off_led
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: "setLedMode 1 1"
      - delay: 1s
      - lambda: |-
          leapmmw(id(uart_bus)).getmmwConf("getLedMode 1");
      - delay: 1s
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays

  - id: set_distance
    mode: queued
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string range = "setRange 0 " + str_sprintf("%.2f", id(distance_global));
          return std::vector<unsigned char>(range.begin(), range.end());
      - delay: 1s
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays

  - id: set_latency
    mode: queued
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string setL = "setLatency 0.1 " + str_sprintf("%.0f", id(latency_global));
          return std::vector<unsigned char>(setL.begin(), setL.end());
      - delay: 1s
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays

  - id: set_sensitivity
    mode: queued
    then:
      - switch.turn_off: mmwave_sensor
      - delay: 1s
      - uart.write: !lambda
          std::string mss = "setSensitivity " + to_string(id(sensitivity_global));
          return std::vector<unsigned char>(mss.begin(), mss.end());
      - delay: 1s
      - switch.turn_on: mmwave_sensor
      - delay: 6s # the sum of mmwave_sensor delays
      